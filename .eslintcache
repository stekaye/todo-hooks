[{"/Users/stephenkaye/repos/REACT/todos-hooks/src/reportWebVitals.js":"1","/Users/stephenkaye/repos/REACT/todos-hooks/src/TodoApp.js":"2","/Users/stephenkaye/repos/REACT/todos-hooks/src/TodoList.js":"3","/Users/stephenkaye/repos/REACT/todos-hooks/src/App.js":"4","/Users/stephenkaye/repos/REACT/todos-hooks/src/TodoForm.js":"5","/Users/stephenkaye/repos/REACT/todos-hooks/src/hooks/useInputState.js":"6","/Users/stephenkaye/repos/REACT/todos-hooks/src/TodoItem.js":"7","/Users/stephenkaye/repos/REACT/todos-hooks/src/hooks/useToggleState.js":"8","/Users/stephenkaye/repos/REACT/todos-hooks/src/EditTodoForm.js":"9","/Users/stephenkaye/repos/REACT/todos-hooks/src/hooks/useTodoState.js":"10","/Users/stephenkaye/repos/REACT/todos-hooks/src/hooks/useLocalStorageState.js":"11"},{"size":362,"mtime":1611311769145,"results":"12","hashOfConfig":"13"},{"size":1476,"mtime":1611333034447,"results":"14","hashOfConfig":"13"},{"size":771,"mtime":1611331607752,"results":"15","hashOfConfig":"13"},{"size":122,"mtime":1611331576341,"results":"16","hashOfConfig":"13"},{"size":719,"mtime":1611330558699,"results":"17","hashOfConfig":"13"},{"size":296,"mtime":1611321079788,"results":"18","hashOfConfig":"13"},{"size":1579,"mtime":1611325179296,"results":"19","hashOfConfig":"13"},{"size":246,"mtime":1611323070144,"results":"20","hashOfConfig":"13"},{"size":1286,"mtime":1611331527710,"results":"21","hashOfConfig":"13"},{"size":860,"mtime":1611332795002,"results":"22","hashOfConfig":"13"},{"size":1120,"mtime":1611333270027,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"3p6spy",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"/Users/stephenkaye/repos/REACT/todos-hooks/src/reportWebVitals.js",[],["48","49"],"/Users/stephenkaye/repos/REACT/todos-hooks/src/TodoApp.js",[],"/Users/stephenkaye/repos/REACT/todos-hooks/src/TodoList.js",[],"/Users/stephenkaye/repos/REACT/todos-hooks/src/App.js",[],"/Users/stephenkaye/repos/REACT/todos-hooks/src/TodoForm.js",[],"/Users/stephenkaye/repos/REACT/todos-hooks/src/hooks/useInputState.js",[],"/Users/stephenkaye/repos/REACT/todos-hooks/src/TodoItem.js",[],"/Users/stephenkaye/repos/REACT/todos-hooks/src/hooks/useToggleState.js",[],"/Users/stephenkaye/repos/REACT/todos-hooks/src/EditTodoForm.js",[],"/Users/stephenkaye/repos/REACT/todos-hooks/src/hooks/useTodoState.js",[],"/Users/stephenkaye/repos/REACT/todos-hooks/src/hooks/useLocalStorageState.js",["50"],"import {useState, useEffect} from 'react';\n\nfunction useLocalStorageState(key, defaultValue) {\n\n  //Make piece of state based of value in local storage (or default value).\n  // Use function in useState to figure out what to initialise state as. Here, based on what is in local storage.\n  const [state, setState] = useState(() => {\n    let val;\n    try {\n      val = JSON.parse(window.localStorage.getItem(key) || String(defaultValue));\n    }\n    catch (e) {\n      val = defaultValue;\n    }\n    return val;\n  })\n\n  //Use useEffect to update local storage whenever piece of stage changes\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state))\n  }, [state])\n  return [state, setState];\n}\n\nexport default useLocalStorageState;\n\n// USECASE\n// const [todos, setTodos] = useLocalStorageState('todos\", [])\n// const [mood, setMood] = useLocalStorageState('mood, 'happy)\n// Therefore, mood will be set to happy initially in local storage. \n// If we had a button we could add an onClick event and call setMood and change it to something else.\n// Use exactly the same as if it came directly from useState()\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":21,"column":6,"nodeType":"57","endLine":21,"endColumn":13,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'key'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [key, state]",{"range":"64","text":"65"},[671,678],"[key, state]"]